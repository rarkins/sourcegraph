@import 'open-color/open-color.scss'; // Sass variables
@import '~open-color/open-color.css'; // CSS variables

// General reusable colors from our custom color palette

// Gray (blueish) palette
$white: #ffffff;
$gray-01: #f2f4f8;
$gray-02: #e4e9f1;
$gray-03: #d7ddea;
$gray-04: #cad2e2;
$gray-05: #bdc7db;
$gray-06: #afbcd4;
$gray-07: #a2b0cd;
$gray-08: #95a5c6;
$gray-09: #889abf;
$gray-10: #7a8fb8;
$gray-11: #6d84b0;
$gray-12: #6078a9;
$gray-13: #566e9f;
$gray-14: #4f6592;
$gray-15: #475c85;
$gray-16: #405377;
$gray-17: #39496a;
$gray-18: #32405d;
$gray-19: #2b3750;
$gray-20: #242e42;
$gray-21: #1d2535;
$gray-22: #151c28;
$gray-23: #0e121b;
$black: #07090d;

// Tell Bootstrap to use colors from OpenColor
$blue: $oc-blue-7;
$indigo: $oc-indigo-7;
$purple: $oc-violet-7;
$pink: $oc-pink-7;
$red: $oc-red-7;
$orange: $oc-orange-7;
$yellow: $oc-yellow-7;
$green: $oc-green-7;
$teal: $oc-teal-7;
$cyan: $oc-cyan-3;

// Logo colors
$logo-orange: #f96216;
$logo-blue: #00b4f2;
$logo-purple: #b200f8;

$primary: $blue;
$secondary: #2b3750;
$success: $green;
$info: $cyan;
$warning: $yellow;
$danger: $red;
$secondary-light: darken($gray-01, 5%);
$merged: $purple;

// Color for the <mark> element and highlighted/hovered tokens
$mark-bg-dark: rgba(217, 72, 15, 0.5);
$mark-bg-light: rgba(255, 192, 120, 0.5);

// Added to bg- and text- utilities because it is commonly needed in our app.
$theme-colors: (
    'merged': $merged,
);

$theme-colors-light: (
    'secondary': $secondary-light,
);

$body-color: var(--body-color);
$body-bg: var(--body-bg);

$text-muted: var(--text-muted);

:root {
    --primary: #{$primary};
    --secondary: #{$secondary-light};
    --success: #{$success};
    --info: #{$info};
    --warning: #{$warning};
    --danger: #{$danger};
    --merged: #{$merged};
    --color-border-active: #329af0;
    --logo-orange: #{$logo-orange};
    --logo-blue: #{$logo-blue};
    --logo-purple: #{$logo-purple};
}
.theme-light {
    // Affects default browser styles
    color-scheme: light;

    --body-color: #{$gray-19};
    --body-bg: #fbfdff;
    --color-bg-1: #ffffff;
    --color-bg-2: #{$gray-01};
    --color-bg-3: #{$gray-04};
    --color-bg-4: #{$gray-02};
    --color-bg-5: #{$gray-13};
    --color-bg-6: #{$gray-13};
    --color-text-3: #{rgba($gray-17, 0.5)};
    --mark-bg: #{$mark-bg-light};
    --text-muted: #6d727c;
    --line-number-color: #{$gray-05};
    --header-icon-color: #{$gray-13};
    --link-color: #{$gray-13};
    --link-active-color: #{$gray-18};
    --link-hover-color: #{$gray-21};
    --link-hover-bg-color: #{$gray-02};
    --link-hover-bg-color-2: #{$gray-03};
    --border-color: #{$gray-04};
    --border-color-2: #{$gray-02};
    --sourcegraph-logo-text-color: #242427;
    --search-query-text-color: #2b3750;
    --search-filter-keyword-color: #268bd2;
    --search-keyword-color: #{$oc-grape-7};
    --infobar-warning-color: #{$oc-red-8};
    --web-content-link-color: #1c7cd6;
    --disabled-action-bg-color: #{$oc-gray-3};
    --disabled-action-text-color: #{$oc-gray-5};
}
.theme-dark {
    // Affects default browser styles
    color-scheme: dark;

    --secondary: #{$secondary};
    --border-color: #{$gray-19};
    --border-color-2: #1b1730;
    --body-color: #ffffff;
    --body-bg: #04070e;
    --color-bg-1: #{$gray-22};
    --color-bg-2: #{$gray-21};
    --color-bg-3: #{$gray-19};
    --color-bg-4: #{$gray-22};
    --color-bg-5: #{$gray-17};
    --color-bg-6: #{$gray-06};
    --color-text-3: #{rgba(#ffffff, 0.5)};
    --mark-bg: #{$mark-bg-dark};
    --text-muted: #{$gray-07};
    --line-number-color: #{$gray-18};
    --header-icon-color: #{$gray-11};
    --link-color: #{$gray-07};
    --link-active-color: #{$gray-02};
    --link-hover-color: #ffffff;
    --link-hover-bg-color: #{$gray-18};
    --link-hover-bg-color-2: #{$gray-17};
    --sourcegraph-logo-text-color: #ffffff;
    --search-query-text-color: #f2f4f8;
    --search-filter-keyword-color: #569cd6;
    --search-keyword-color: #{$oc-grape-4};
    --infobar-warning-color: #{$oc-red-6};
    --web-content-link-color: #329af0;
    --disabled-action-bg-color: #{$oc-gray-8};
    --disabled-action-text-color: #{$oc-gray-9};
}

.theme-light.theme-redesign,
// Descendant selector is required for Storybook `addRedesignVariants` helper.
.theme-light .theme-redesign {
    --link-color: #0bdbd1;
    --web-content-link-color: #0bdbd1;
}
.theme-dark.theme-redesign,
.theme-dark .theme-redesign {
    --link-color: #edb1ff;
    --web-content-link-color: #edb1ff;
}

.theme-light {
	--hl-yellow: #b58900;
	--hl-green: #859900;
	--hl-red: #dc322f;
	--hl-orange: #cb4b16;
	--hl-blue: #268bd2;
	--hl-gray-4: #586e75; // TODO order these correctly
	--hl-gray-0: #767676;
	--hl-gray-1: #839496;
	--hl-gray-5: #{$gray-19};
	--hl-gray-2: #93a1a1;
	--hl-gray-blue: #657b83;
	--hl-cyan: #2aa198;
	--hl-eggshell: #eee8d5;
	--hl-purple: #6c71c4;
	--hl-pink: #d33682;

	--hl-bg-red: #f5dbdd;
	--hl-bg-green: #deeade;
}

.code {
	color: var(--hl-gray-blue);

	// Comments
	.comment, .meta.documentation { color: var(--hl-gray-0) }

	// String constants
	.string { color: var(--hl-cyan) } // contents
	.punctuation.definition.string { color: var(--hl-gray-1) } // surrounding quotes
	.constant.character.escape { color: var(--hl-red) } // escape sequences

	// Other constants
	.constant { color: var(--hl-yellow) } // TODO this might not be specific enough. It matched punctuation.definition.constant.ruby inside constant other symbol ruby, which has an overridden style
	.constant.language { color: var(--hl-yellow) }
	.constant.numeric { color: var(--hl-purple) }
	.constant.character { color: var(--hl-orange) }
	.constant.other { color: var(--hl-orange) }
	.meta.preprocessor { color: var(--hl-yellow) } // TODO do we need this? And should it go with the C section?

	// Variables
	.variable { color: var(--hl-blue) }
	.variable.function { color: var(--hl-yellow) } // function calls, etc.
	.variable.language { color: var(--hl-pink) } // reserved variables like this or self
	.punctuation.definition.variable { color: var(--hl-green) } // punctuation in variable definitions like $ in shell

	// Keywords and storage
	.keyword.operator { color: var(--hl-gray-blue) }
	.keyword.control  {
		color: var(--hl-green);
		&.import, &.include { color: var(--hl-orange) }
		&.class { color: var(--hl-yellow) }
	}
	.keyword.other.new { color: var(--hl-red) }
	.keyword.other.special-method { color: var(--hl-orange) }
	.storage { color: var(--hl-green) }
	.storage.modifier { color: var(--hl-gray-4) } // const, public, inline
	.storage.type { color: var(--hl-blue) } // int, bool, char

	// Entities
	.entity.name { color: var(--hl-yellow) }
	.entity.name.tag { color: var(--hl-blue) }
	.entity.other.inherited-class { color: var(--hl-blue) }
	.entity.other.attribute-name { color: var(--hl-yellow) }

	// Support (builtin libraries like browser)
	.support.function { color: var(--hl-green) }
	.support.function.construct { color: var(--hl-red) }
	.support.type.exception { color: var(--hl-orange) }
	.support.type, .support.class { color: var(--hl-green) }
	.support.constant.color { color: var(--hl-yellow) } // color constants #ababab

	// Braces
	.punctuation.section.braces { color: var(--hl-gray-blue) }
	.punctuation.section.block { color: var(--hl-gray-blue) }

	// Parens
	.punctuation.section.parens { color: var(--hl-gray-blue) }
	.punctuation.section.group { color: var(--hl-gray-blue) }

	// Brackets
	.punctuation.section.brackets { color: var(--hl-blue) }

	// Other
	.punctuation.separator.continuation { color: var(--hl-red) } // line continuation \
	.punctuation.definition.tag { color: var(--hl-gray-2); } // tag delimiters <>
	.invalid { background: var(--hl-bg-red) }

	//////////////////////////////////
	// Language-specific highlights //
	//////////////////////////////////

	.source.scss {
		.invalid.deprecated.color.w3c-non-standard-color-name { color: var(--hl-yellow) }
		.keyword.control.untitled { color: var(--hl-yellow) } // TODO what is this?
	}

	.source.less {
		.keyword.control.html.elements { color: var(--hl-yellow) }
	}

	.source.scss, .source.css, .source.less {
		.entity.name.tag { color: var(--hl-yellow) }
		.entity.other {
			&.class { color: var(--hl-yellow) }
			&.id { color: var(--hl-yellow) }
			&.pseudo-class { color: var(--hl-blue) }
			&.pseudo-element { color: var(--hl-blue) } // :hover
		}
	}

	.source.ruby {
		.keyword.other.special-method { color: var(--hl-orange) }
		.variable.other.constant { color: var(--hl-yellow) }
		.constant.other.symbol { color: var(--hl-cyan) }
		.punctuation.definition.constant { color: var(--hl-cyan) }
	}

	.source.php {
		.meta.array .support.function.construct { color: var(--hl-yellow) }
	}

	.source.c, .source.c\2b\2b { // escaped c++
		.entity.name.function.preprocessor {color: var(--hl-orange)}
		.meta.preprocessor.macro {color: var(--hl-orange)}
		.meta.preprocessor.include .punctuation.definition.string { color: var(--hl-cyan) } // include <> and ""
	}

	.source.c\2b\2b { // escaped c++
		.storage.modifier { color: var(--hl-green) }
	}

	.text.tex, .text.latex {
		.punctuation.section.group { color: var(--hl-red) }
		.punctuation.definition.arguments { color: var(--hl-red) }
		.meta.group.braces { color: var(--hl-yellow) }
		.variable.parameter.function { color: var(--hl-orange) }

		.string.other.math { color: var(--hl-yellow) }
		.constant.other.math { color: var(--hl-cyan) }
		.constant.character.math { color: var(--hl-cyan) }
		.punctuation.definition.constant.math { color: var(--hl-red) }
		.punctuation.definition.string { color: var(--hl-red) }

		.variable.parameter.definition.label { color: var(--hl-orange) }
		.support.function.be { color: var(--hl-green) }
		.support.function.section { color: var(--hl-orange) } // \subsection
		.support.function.general { color: var(--hl-cyan) }
		.storage.type.label { color: var(--hl-cyan) } // \label
		.keyword.other.reference { color: var(--hl-cyan) } // \ref
	}

	.source.python {
		.storage.type.class { color: var(--hl-green) }
		.storage.type.function { color: var(--hl-green) }
		.storage.modifier.global { color: var(--hl-green) }
		.support.type.exception { color: var(--hl-yellow) }
	}

	.source.shell {
		.keyword.operator.expansion { color: var(--hl-green) } // the #* in "${1#*=}"
	}

	.source.perl {
		.support.function { color: var(--hl-blue)}
	}

	.source.diff {
		.meta.range { color: var(--hl-blue) }
		.entity.name.section { color: var(--hl-orange) }
		.markup.deleted {
			color: var(--hl-gray-5);
			background: var(--hl-bg-red);
		}
		.markup.inserted {
			color: var(--hl-gray-5);
			background: var(--hl-bg-green);
		}
	}

	.js {
		.variable.other {
			&.readwrite, &.object, &.constant { color: var(--hl-gray-blue) }
		}
	}
}
